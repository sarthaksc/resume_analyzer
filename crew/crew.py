from crewai import Crew
from crew.agents import doc_extractor_agent, resume_matcher_agent, resume_coach_agent
from crew.tasks import extract_resume_task, match_resume_task, coach_resume_task


# Assign agents after importing everything to avoid circular reference
extract_resume_task.agent = doc_extractor_agent
match_resume_task.agent = resume_matcher_agent
coach_resume_task.agent = resume_coach_agent

# Setup the crew
crew = Crew(
    agents=[
        doc_extractor_agent,
        resume_matcher_agent,
        resume_coach_agent,
    ],
    tasks=[
        extract_resume_task,
        match_resume_task,
        coach_resume_task,
    ],
    verbose=True,
)

def run_resume_crew(resume_text: str, target_companies: list[str]) :
    """
    Takes plain text of a resume, runs the crew, and returns the output report.
    """
    # Optionally pass variables to task context here if needed in the future
    result = crew.kickoff(inputs={
        "resume_text": resume_text,
        "target_companies": target_companies  # pass from matcher to coach
    })

    if isinstance(result, str):
        # Sometimes Crew returns a full string directly
        return result

    debug_data = {}
    if hasattr(result, 'tasks_output'):
        final_outputs = []
        for idx, task_output in enumerate(result.tasks_output, start=1):
            # task_output might be a string or a task object

            if isinstance(task_output, str):
                final_outputs.append(f"### Suggestion {idx}\n\n{task_output}")
            elif hasattr(task_output, 'output'):
                final_outputs.append(f"### Suggestion {idx}\n\n{task_output.output}")
            else:
                final_outputs.append(f"### Suggestion {idx}\n\n{str(task_output)}")

        return "\n\n".join(final_outputs)

    return "⚠️ No output generated by the AI agents."

import re

def extract_first_agent_output(full_output: str) -> str:
    """
    Extracts the output of the first agent from the combined suggestions markdown text.
    """
    pattern = r"### Suggestion 1\s*(.*?)\s*### Suggestion 2"
    match = re.search(pattern, full_output, re.DOTALL)
    if match:
        return match.group(1).strip()
    elif "### Suggestion 1" in full_output:
        # If there's only one suggestion
        return full_output.split("### Suggestion 1", 1)[1].strip()
    else:
        return "❌ First agent output not found."

